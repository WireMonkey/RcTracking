@page "/"
@using RcTracking.Shared.Model
@using RcTracking.UI.Events
@using RcTracking.UI.Interface
@using RcTracking.UI.Services

<MudGrid Spacing="6" Justify="Justify.SpaceEvenly">
	<MudItem xs="6">
		<MudPaper Class="pa-4">
			<MudText Typo="Typo.h5" GutterBottom="true">Total Flights</MudText>
			@flightCount
		</MudPaper>
	</MudItem>
	<MudItem xs="6">
		<MudPaper Class="pa-4">
			<MudText Typo="Typo.h5" GutterBottom="true">This Year</MudText>
			@flightsThisYear
		</MudPaper>
	</MudItem>
	<MudItem xs="6">
		<MudPaper Class="pa-4">
			<MudText Typo="Typo.h5" GutterBottom="true">Total Planes</MudText>
			@planeCount
		</MudPaper>
	</MudItem>
	<MudItem xs="6">
		<MudPaper Class="pa-4">
			<MudText Typo="Typo.h5" GutterBottom="true">Working Planes</MudText>
			0
		</MudPaper>
	</MudItem>

	@* Add fun stats like Most flights this year plane with most flights
	Graphs of flights over time
		total and per plane
	Graph of total flights per plane
	Graph of flights per month *@

</MudGrid>

@code {

	[Inject]
	private IFlightService FlightService { get; set; }

	[Inject]
	private IPlaneService PlaneService { get; set; }

	[Inject]
	private ICombineDataService CombineDataService { get; set; }

	[Inject]
	private EventBus EventBus { get; set; }

	private int flightCount { get; set; } = 0;
	
	private int flightsThisYear { get; set; } = 0;

	private int planeCount { get; set; } = 0;

	protected override async Task OnInitializedAsync()
	{
		EventBus.OnMessage += OnMessage;
		await loadFlights();
		await loadPlanes();
	}

	private void OnMessage(object? sender, EventMessage? e)
	{
		Console.WriteLine($"Event received. Type: {e?.Event.ToString() ?? "none"}");

		switch (e?.Event)
		{
			case EventEnum.RefreshFlight:
				flightCount = FlightService.TotalFlights();
				flightsThisYear = FlightService.TotalFlights(DateTime.Now.Year);
				InvokeAsync(StateHasChanged);
				break;
			case EventEnum.RefreshPlane:
				planeCount = PlaneService.Planes?.Count ?? 0;
				InvokeAsync(StateHasChanged);
				break;
			default:
				break;
		}
	}

	private async Task loadFlights()
	{
		if (!FlightService.HasLoaded)
		{
			await FlightService.LoadFlightsAsync();
		}
		else
		{
			flightCount = FlightService.TotalFlights();
			flightsThisYear = FlightService.TotalFlights(DateTime.Now.Year);
		}
	}

	private async Task loadPlanes()
	{
		if (!PlaneService.HasLoaded)
		{
			await PlaneService.LoadPlanesAsync();
		}
		else
		{
			planeCount = PlaneService.Planes?.Count ?? 0;
		}
	}
}